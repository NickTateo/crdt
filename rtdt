#!/usr/bin/python3

from cmd import Cmd
import sys
import os
import json
from backend import *

class VCTool(Cmd):
    prompt = 'rtdt > '
    intro = "[ RED TEAM DEPLOYMENT TOOL ]\nType help for options.\nType exit or q to quit."

    hosts = None
    conf = None

    def startup(self):
        # Any functions necessary on startup
        self.conf, self.hosts = init()

    def preloop(self):
        self.startup()

    def precmd(self, line):
        self.startup()
        return line

    ## List of commands
    def do_help(self, inp):
        print("1) host []\n   host add target [template] [name] \n   host add attack [name] \n   host list \n   host rm [name]")
        print("2) generate \n3) load")

    ## All host related actions: add host, list hosts available, list current hosts, and remove host
    def do_host(self, inp):
        options = inp.split()
        if len(options) > 0:
            # vuln or host
            if options[0] == 'add':
                if len(options) > 3 and options[1] == 'target':
                    template, name = options[2:4]
                    hosts = addHost(self.conf, self.hosts, template, name)

                elif len(options) > 2 and options[1] == 'attack':
                    name = options[2]
                    # Default attack host source name
                    hosts = addHost(self.conf, self.hosts, "test_kali", name)

                else:
                    print("usage: host add target [template] [name] \n host add attack [name] \n")

            elif options[0] == 'list':
                for h in self.hosts:
                    print(f"\nHost: {h['name']}\nTemplate: {h['id']}")
                    print("--------------------------------------------------")

            elif options[0] == 'rm':
                if len(options) > 1:
                    name = options[1]
                    hosts = removeHost(self.conf, self.hosts, name)

                else:
                    print("usage: host rm [name]")
            else:
                print("Type help for options.")
        else:
            print("usage: host []\n   host add target [template] [name] \n   host add attack [name] \n   host list \n   host rm [name]")

    ## Generate
    def do_generate(self, inp):
        print("Hosts:")
        if len(self.hosts) > 0:
            for h in self.hosts:
                print(f"{h['name']}: {h['id']}")
  
        else:
            print("No hosts.")
        
        if_gen = input("Would you like to generate a model with this information? (y/n): ")
        if if_gen.lower() == 'n' or if_gen.lower() != 'y':
            print("Not generating a model.")
        else:
            print(f"Generating...")
            hosts = generateModel(self.conf, self.hosts)

    ## Load
    def do_load(self, inp):
        print("Loading...")
        hosts = loadModel(self.conf, self.hosts)    
    
    ## Exit the tool
    def do_exit(self, inp):
        print("Bye.")
        return True

    def default(self, inp):
        if inp == 'q':
            return self.do_exit(inp)

    do_EOF = do_exit

if len(sys.argv) > 1:
    VCTool().onecmd(' '.join(sys.argv[1:]))
else:
    VCTool().cmdloop()
